use std::array;

use anyhow::Result;
use halo_accumulation::{
    acc::Accumulator,
    pcdl::{EvalProof, Instance},
};
use halo_group::{
    Affine, Fp, Fq, PallasConfig, PastaConfig, Point, Scalar, VestaConfig,
    ark_ec::{AffineRepr, CurveConfig, CurveGroup},
    ark_ff::{BigInt, UniformRand},
    ark_std::{
        One, Zero,
        rand::{RngCore, thread_rng},
        test_rng,
    },
};
use halo_schnorr::{PublicKey, SchnorrSignature, SecretKey, generate_keypair};
use itertools::Itertools;
use std::str::FromStr;

use crate::{
    circuit::{PlonkCircuit, PlonkCircuitCommitments, PlonkPublicInputs, Trace},
    frontend::{
        Call, Frontend,
        asdl::WireAccumulator,
        pcdl::{CallInstance, WireHPoly, WireInstance, WirePublicParams},
        plonk::{
            CallPlonk, WirePlonkCircuit, WirePlonkCircuitCommitments, WirePlonkProof,
            WirePlonkPublicInputs,
        },
        poseidon::outer_sponge::OuterSponge,
        primitives::{WireAffine, WireBool, WireScalar},
        signature::{CallSignature, WirePublicKey, WireSchnorrSignature},
    },
    plonk::{PlonkProof, PlonkProofCommitments, PlonkProofEvalProofs, PlonkProofEvals},
    utils::Q_POLYS,
};

const fn const_pallas(x: [u64; 4], y: [u64; 4], z: [u64; 4]) -> Point<PallasConfig> {
    Point::new_unchecked(const_fq(x), const_fq(y), const_fq(z))
}
const fn const_vesta(x: [u64; 4], y: [u64; 4], z: [u64; 4]) -> Point<VestaConfig> {
    Point::new_unchecked(const_fp(x), const_fp(y), const_fp(z))
}
const fn const_fp(x: [u64; 4]) -> Fp {
    Fp::new_unchecked(BigInt::new(x))
}
const fn const_fq(x: [u64; 4]) -> Fq {
    Fq::new_unchecked(BigInt::new(x))
}
#[rustfmt::skip]
pub const IVC_FP_CIRCUIT: PlonkCircuit<PallasConfig> = PlonkCircuit {
    rows: 65536,
    public_input_count: 405,
    omega: const_fp([11499106550954523456, 7570581481237397936, 3393872299312777009, 3649061251565789237]),
    Cs: PlonkCircuitCommitments {
        qs: [
            const_pallas([11947755647502269070, 13718175690581381978, 15540412871013971905, 3081017746622024303], [5429523559423178285, 16154924050694774133, 15224813995250708028, 3866245489159786729], [4460056183496287403, 1424246558109786745, 15920190824459877657, 565707350625782065]),
            const_pallas([7985493414595697359, 5294385869495802366, 18308278698572060710, 2854793782788214616], [12776437528771029180, 4280523214933589995, 1012794156020199147, 3843109898610416516], [18162438010164860886, 15538306614660301868, 8878695728739301621, 1803322210108550632]),
            const_pallas([18046237273639251380, 8350629932351228100, 15032045194958076778, 2204824462779724304], [7464060151561076188, 14799881179376517256, 13746869275715246935, 2997184264658657724], [2234936018410785012, 9839711227186185979, 5005134740099751768, 30687208533663802]),
            const_pallas([271112102114613397, 2096518919941847335, 17124513133848199385, 229649321632617017], [12324831692249122408, 17292045791954061438, 8725061960542287490, 4534729928121565471], [4867570182063011841, 16082130969541642847, 6164976900073134138, 375420423790226533]),
            const_pallas([2254379553054876607, 13663694678510398641, 13660607840549057085, 3581430110208465950], [5303986756199601985, 8757171102342466544, 18077924192442036247, 299852184738262270], [14973844236506522227, 6045403498089810993, 7121570461945961784, 4389440060235296548]),
            const_pallas([17246105919455870592, 410434694350711924, 4059497456753410852, 1481587776844930177], [14995495284608380628, 7663330293868920240, 964621090635099074, 467821010598357214], [9389626477505089568, 5883220546175698414, 986373167103864224, 4583547774974123613]),
            const_pallas([7806644914331508710, 3666790422913797617, 214506115760154907, 2945784249791185702], [6436616555347127588, 14644398092735342929, 15855849792148922713, 3461169427880656162], [13726055878806070829, 9150584079823302390, 6618537541491396715, 1020758940479468812]),
            const_pallas([15695855474410867, 10270853427630503605, 1963553185065896282, 2881427186627075743], [1570533894293195149, 9082528508601623460, 2701169285509410136, 2372121626359865312], [2395277918714384001, 2258522820403053123, 5598641293377653881, 3211102233576433667]),
            const_pallas([7835689725170658764, 12972002675055315754, 3040192499895011426, 657969542970160972], [10336902049576215457, 5260423165398580338, 183033378728802485, 1627212679803360892], [4339758542974450459, 3503842924545214162, 8066636044600009090, 3007607219717306499]),
            const_pallas([3780891978758094845, 11037255111966004397, 18446744073709551615, 4611686018427387903], [3780891978758094845, 11037255111966004397, 18446744073709551615, 4611686018427387903], [0, 0, 0, 0]),
        ],
        rs: [
            const_pallas([17799387496458399790, 6029899944072982884, 9452489135161849026, 1918163347661235327], [592726281418309860, 11505127854172295167, 6040155870276655194, 2226461655593693604], [12470592096623017849, 17115146733543950405, 2105521348192354369, 3742518503548810687]),
            const_pallas([7418434294638994736, 215017856413639828, 8139718170055580021, 3622320855591244127], [9311912641204162302, 12427759138126637685, 3186181305085185527, 547027995516477353], [3562530499245783705, 14698562325891463769, 11058112332331823899, 2257763229982332899]),
            const_pallas([317245926750112643, 15053392785841054118, 2221218820707561886, 2063504151553157846], [10228507421036908369, 8690976287521841379, 11835186250817044927, 1462661845630380888], [15862861301971640004, 3183788019786775006, 7205884560485836230, 1006922178560128983]),
            const_pallas([8577064543733646230, 14941155348535019071, 7553610199769929357, 861875126364113521], [11330626215016366856, 4662197092328656846, 12625162364048586638, 2680632050191300633], [7862447772601849272, 17846503689254286440, 7181833048362412993, 850428762745511659]),
            const_pallas([17807064464196109544, 14909712525103589963, 14993507192288744510, 3445793158198871968], [13470395639305205129, 10175783736986642263, 8378720826181223700, 4204161247348609282], [16169332264223503737, 1071680139280465308, 18146624207928556604, 2394850184825593420]),
            const_pallas([8516865864637654777, 6138562371538734302, 6443843974627824923, 1038881303449362250], [261109665098388712, 11449317246167052123, 17692238191900189374, 1021380015767997101], [9666965696597926859, 7981613631101133827, 6682084875390710034, 1191357928604801054]),
            const_pallas([8776294410657093469, 17738482910081884571, 17892283225778983387, 3445867456693577178], [8515845906719861510, 14654649439447267805, 221992427475102495, 1817484114883447643], [17316863946314016976, 10020230518834974982, 6944229616280776939, 1157164698854643903]),
            const_pallas([169868869310112457, 18423901867955743361, 10535033713628845314, 2269758470678561189], [9416717988723227649, 5147086106741166006, 12995084033589221487, 2616085183711838888], [12044734650690276867, 14609809766887288581, 6507197285876678546, 4546802511747823161]),
            const_pallas([14027368752195197014, 1498127855136960136, 9186993509560368876, 561121019000761333], [17807522697653342339, 7524608683123468251, 11197084754455969835, 830263579075380867], [8694816869083729760, 9121433104536414344, 10185524055715841464, 3038034367992942068]),
            const_pallas([3578310285463317230, 9639039119940358692, 6385645828433846893, 3132027228894434093], [1144708239847882487, 3469430736060328212, 14872945436717863051, 3072098388128641537], [1803974234601712310, 8315048352451300015, 1687969934168736312, 3516991324419946652]),
            const_pallas([8732542653493039938, 17419607015781811243, 2179020345207174536, 2890050301971171967], [5633623357226576120, 6377734156158983897, 5516354935344249337, 1057529867429242760], [14874403530730689881, 10658826917596426637, 11605096124614544318, 107792831414325544]),
            const_pallas([2395880265037426921, 12352171769990840466, 9315759270853317834, 959602113406413224], [3708491909569186020, 1038671508291065, 12142256362708342592, 3568830487409056325], [17848305821870118065, 7609443177769431696, 15846976971373464964, 3498635410019248827]),
            const_pallas([8803489445409913250, 17835869853042770796, 17146291997748658895, 2135285050904614137], [7696864565595096155, 10666867297555731510, 6328328373609330508, 4314270160753712534], [4406037690825643001, 719277096746694323, 4872367906382985311, 3158879358441453886]),
            const_pallas([17898845527773630584, 15488040328510754327, 1814543810141911803, 915058393309805524], [6722368408914585625, 3705441218965383953, 11986754146755386685, 3327658015332310151], [2890464157998538571, 10744004214405770175, 9250422333831788579, 781882260426324262]),
            const_pallas([14371162668428961563, 8828057784819723107, 7874564637953160006, 3254117838689289989], [6742538351203943421, 12591861918917817065, 4443542261495653900, 1716139880022903287], [12303181136056368351, 18257950510715860933, 9577833848684762187, 1978832232476243622]),
        ],
        ids: [
            const_pallas([17245218286301175754, 5443106155149552812, 13979633527584020636, 1072380038068409617], [6174653097294934185, 5295696878733948907, 15359514067237242849, 570681679943982530], [12957242124978673036, 10391791918183789438, 12373057237572474462, 729687938793540085]),
            const_pallas([45997005858872965, 14159922695508737526, 2729049572407286291, 3509239544739585482], [4031404931624126421, 17142002760893097028, 15719577791689748102, 4467922451838667526], [2829529859941651768, 15100279723362006260, 17409022533143107199, 1296414877801631513]),
            const_pallas([15348236434704988226, 2127730875207226116, 18294917345824129445, 4033826220479270690], [8919237431878883779, 17068157331187965918, 13470551042819900695, 1884862761628352389], [13911973372822857422, 461527984202165042, 8952021242531857748, 2811848697025884381]),
            const_pallas([1733313852482148749, 13409522397669027343, 13149168231329484433, 1835222425976507269], [14944953879320647204, 5414898293714313703, 8472756824600312994, 4251259035729409816], [8050294950057508219, 5628569040624934697, 10734787049364561175, 1823604040597275561]),
            const_pallas([7224388002242871200, 5379605894240651687, 11907769970959494114, 4517526307295511954], [7868095296114978730, 3781404638666035280, 1977483408909238848, 1323595312915228911], [10134646243005873593, 2202083288014174485, 18016827342369481418, 645030078662889354]),
            const_pallas([18176983536104775122, 4565283310445779742, 15279737053203971925, 1945576321723391807], [5547853032450368700, 1490094311709377109, 14325784817454059126, 2236424347620374966], [3394613898987935607, 10937185998077761072, 9581838321153686378, 4076430155195079262]),
            const_pallas([3150148307127678956, 10870663648708290763, 17158726206152308089, 2286114187119308234], [3010921005826810222, 10332863001901662431, 4920317785835903401, 1770045743156820677], [1480992715988215504, 1454123535423052694, 12656488875437451785, 1704749908968184957]),
            const_pallas([15370268186524831574, 7021911893321709671, 12286435887886320809, 631465949421989435], [2356279515114775855, 1116592605226851689, 18374637083977934221, 4354297616971338242], [16816941807186358877, 11206150325195153414, 12224141176414994522, 862347806316227414]),
        ],
        sigmas: [
            const_pallas([5376045046361517957, 7583119737399713003, 5053008321033433012, 1197744832965459463], [3086914769163000000, 7265656656928049419, 13282448754008742927, 957301355923161972], [17587866301098643190, 11999839942090803955, 9641825829295603575, 2825750306490801309]),
            const_pallas([629828638910706277, 11886101861586738837, 10695199786758217400, 607613965002743598], [6402372700490602704, 5704033681448225968, 3243195981124279969, 2537604660697592575], [13552507124740642724, 499558611624275265, 5134926665205233444, 638411994055836735]),
            const_pallas([12590720200675031974, 2686788869146410169, 16407124083963737304, 3517152656621376741], [5536475646611563106, 7208804968575448783, 10356538182218801264, 1838298277889492462], [6999935410975263618, 9810110349067860986, 977715911372291106, 4356261431685645158]),
            const_pallas([16388384226505889288, 8963197362678974329, 1979786959667483085, 4041002867963819416], [1605897352648037088, 9434060562264730956, 10975785284139053161, 3894447823657231480], [4678876294896388573, 9481460053697003617, 5818279633570802393, 1082097281085432597]),
            const_pallas([2562792304809859354, 13299199688002597489, 18095896587195379558, 2924439610655469916], [15896703713275291236, 16110683679507147946, 6812250294302220302, 2774754869055648855], [14355334432760651786, 14638858574632626913, 18094893368347733835, 2510764700743693966]),
            const_pallas([9361227949658126989, 6321106226088564405, 789911356444661653, 3494292784295357103], [3063093371279348031, 297662971355161257, 11519352355989761396, 2833589111250137710], [11105621285273471300, 4520949247517079318, 3166412584966452251, 4187537238518629715]),
            const_pallas([3150148307127678956, 10870663648708290763, 17158726206152308089, 2286114187119308234], [3010921005826810222, 10332863001901662431, 4920317785835903401, 1770045743156820677], [1480992715988215504, 1454123535423052694, 12656488875437451785, 1704749908968184957]),
            const_pallas([15370268186524831574, 7021911893321709671, 12286435887886320809, 631465949421989435], [2356279515114775855, 1116592605226851689, 18374637083977934221, 4354297616971338242], [16816941807186358877, 11206150325195153414, 12224141176414994522, 862347806316227414]),
        ],
    }
};
#[rustfmt::skip]
pub const IVC_FQ_CIRCUIT: PlonkCircuit<VestaConfig> = PlonkCircuit {
    rows: 65536,
    public_input_count: 725,
    omega: const_fq([1762499886011628133, 17827858826216315699, 17827964166359594247, 1905817238367662803]),
    Cs: PlonkCircuitCommitments {
        qs: [
            const_vesta([3504061265299751503, 10429732167547111116, 11506633082481263984, 3775896925884295892], [7463017689659032181, 7861572358315492102, 17446056907121806175, 186606913117006958], [8431708016716669634, 15505701156566483249, 11725626938258573569, 3825663334265288695]),
            const_vesta([5842215232519359948, 1918723663202274933, 9814757643105359301, 1818213173341203016], [10828712818831752186, 6834924183702085049, 15553252215263327785, 3517615152905632405], [10324241762155881806, 14009351285124147936, 3503767674746641053, 2737078347059929481]),
            const_vesta([10542535497975504590, 574220663819292994, 11069005670559166664, 1489899833701785625], [11021710432401463205, 1435952387306176125, 7142650627001987291, 1460526182235282068], [7885931943104718620, 4924189756448263480, 12811849242292101289, 1561755813591922206]),
            const_vesta([9439554477372578381, 6211181515950032246, 9577277349156725512, 2721144592691841319], [18074705169734114493, 11340256790935305596, 11053650364160767694, 3374332921533303799], [241318490053206756, 10701429297801386264, 474486601695202660, 1914012297933417706]),
            const_vesta([17231028152639704294, 7852336323728551054, 8341208283190257771, 3208434558400947850], [12776222416894131292, 13388254998246566190, 11885853956644505108, 2972507878783979046], [6434693090462384666, 5119643013930708805, 3599278755736372922, 4084125651505330167]),
            const_vesta([18010586164763700032, 15115390505844719902, 10532029636594585055, 1538227860970354103], [1332238601374888332, 7827013814300563113, 11001151725795546193, 2705224405330956722], [833296343008564877, 9949458032258880151, 12082271154709235675, 4140776307174864497]),
            const_vesta([13505616087562202806, 6417167514118426289, 12434787096361030335, 2474871338464967627], [10607972707963846061, 6486333096880370224, 3950391960473757047, 533772016642877418], [14453602431187009021, 14755918676691102506, 13812946142857758314, 3025097012525277005]),
            const_vesta([5925596589828785680, 3945230257285646842, 15361551704075107185, 1074790042602579646], [15318967050457904486, 16575855349098748879, 3934191223349890559, 1171019090895966869], [11644855313289674208, 3282851483915917360, 2182226476958702798, 2286030716401539167]),
            const_vesta([7662722564154280307, 13957978180982259662, 2186501803126381054, 2731523660323670943], [14225733978517384286, 8777806893344788536, 8199316690691509975, 1635311035681844781], [2735038356864206010, 17906952257767292362, 1312714347785196601, 1173484550513905295]),
            const_vesta([3895020390906881354, 3161758232125428891, 8250836186521231361, 2013015735671049926], [12198316889767908486, 11658759569273063006, 5633086164254896538, 1041408520149873506], [13268228627517836095, 9104428708343722135, 8853606909775549504, 2597057551068543140]),
        ],
        rs: [
            const_vesta([17595779945121001161, 14721028891587317111, 9165373426798852053, 2041975315000270978], [5044317636069230658, 2604210033687679751, 5087154640373432031, 319400399908710987], [15407678502412769466, 6884836341614245831, 10134407169598421743, 3220629407764024695]),
            const_vesta([3499808461174191793, 3912183230384221411, 3716636010175499593, 2412252702289574265], [18276319851292173352, 6365449823500011734, 419002760209545873, 921155899061007772], [13561526468093556245, 2526363569729025305, 1970370905786617341, 394363823986214711]),
            const_vesta([3613249062817877898, 8431261779880623675, 12181287168396183481, 2875430541132799259], [12638237484188361723, 16581327190407150506, 7197241804799698656, 3568981591901279166], [2238826318863242171, 1396947850741225873, 15363056939248344890, 4236796149219529050]),
            const_vesta([3752468235067651620, 15913977558899933601, 26220317008504205, 118340526715763900], [9602019191031648856, 14019004480221679932, 14136707583346296140, 2687369485589558625], [11288035820922301558, 17376602666950612609, 9714199193550595644, 2982437670641189112]),
            const_vesta([8106783039735056237, 10551545007247044273, 2545182455151936064, 1852709564702897743], [2230319283362248606, 17660408872571349221, 3726734097395119958, 3685630865687136204], [14509865907708917898, 15625659048682564770, 8715997403925892079, 2670151861203516916]),
            const_vesta([13808489538192478722, 13238393017451004090, 5952478498200613895, 761781366187133154], [15084395634853430768, 7909759957424965680, 4428989416106136479, 3361753014479293119], [10381877320587094684, 15780682595729235662, 6773340896124546658, 3522025153547244961]),
            const_vesta([7096514377259840426, 16984914470370950968, 15775184636652071581, 4580862706545522047], [12281746034297997473, 13092331418680071566, 12019947462598430563, 4528572152187072666], [16564398467975074008, 2440314825573213084, 11309522529306657794, 2503009381232379737]),
            const_vesta([1092957917236691396, 11527697382734436172, 10196774711516961597, 4205298167609602173], [18405841879815716634, 3115329851607944443, 2377069611304901906, 4550473501549288487], [12732248252335239758, 5677772743299216603, 15841631777383284739, 1280743860997961307]),
            const_vesta([7641930929120191025, 6358798914953843412, 919520310318810349, 1257782195905605876], [14696792396832685172, 17636775153285773179, 12882789832541289058, 4393927186553821790], [14387491254774321071, 15193883880232343020, 8362626843161340155, 3698100121873167552]),
            const_vesta([4448644652500139791, 15932679333290079561, 13967531785828873795, 1077606253769152671], [14410127140154015620, 11391466378241964748, 857760838070611955, 4161427655499458460], [1929487575086249987, 12946294595559884536, 8219175464740891170, 1118740075704324096]),
            const_vesta([9798981615241985750, 12551129098793308684, 10301692050767503602, 852923715027685003], [5662502716796211514, 17248038183660286006, 8253247061978803743, 306348049164443878], [1879385023291553524, 5426665095474145770, 1656728281157701841, 1872643437450357425]),
            const_vesta([5507892182439584326, 10775282881861971136, 8039781234180240188, 837623785372134545], [14007885358464188040, 3329985963921879829, 7601371456889359562, 1100948708650214703], [9819727341254232875, 8423670666912381203, 17971283735126093020, 1554960849290315553]),
            const_vesta([17961951151294664308, 5128928757797201379, 11199920625676640999, 3643836697768590607], [6390291009482802943, 14666591464932436131, 5832822940611336488, 2579021307959066768], [4608226351404788117, 16511004552678656301, 2617546696713715673, 3815401862932736257]),
            const_vesta([10911138219830150192, 1011205008221112975, 8349220633782303238, 3148700029695484519], [16448810301617335096, 7185310890773030120, 9787911146961236531, 1037978569957747226], [18184789235472663651, 12693498671748318740, 16560117673283617400, 2158462918913851408]),
            const_vesta([12532215183964148876, 14306906560095752835, 10671849336196929582, 4044245987340184924], [15202140818152026644, 12595073062243070251, 6053040262059492913, 708125265627963005], [8581898561917434704, 420771599886898928, 10100285519754884670, 4494598723569384186]),
        ],
        ids: [
            const_vesta([6830587412872408585, 18170172493682731188, 11613007612748471646, 4048493488516951773], [15904742503917074919, 3486980412689742217, 8962641158568186764, 1511798733829980961], [9841384479867897909, 1937339328044742203, 15769565105081209661, 992089533697148102]),
            const_vesta([13981978756661646352, 2392180949038210151, 18051631476439612233, 436940391383903100], [1519048622695382174, 18138101814036020773, 15014239223095398227, 3939969626629882191], [1812206482898915786, 9604042967374488049, 13447391822403021046, 1328560498039407819]),
            const_vesta([3565744641035300340, 15196898493866175565, 14635658546595555183, 2558233896182516797], [10130514370058228123, 12235338698546366562, 46575005694664465, 4421320274852719574], [4077733094519624713, 8780103430526402738, 10929099290521950451, 3453769759685455277]),
            const_vesta([11091598637364581531, 17601369974048190041, 8694373026863500589, 253551171522280539], [16655150831654265501, 14008114214326305341, 10662080553258906740, 2132481485777403092], [14576191342338194911, 15008930870832317054, 13924641510335207258, 3053508680202299490]),
            const_vesta([13283741692360432822, 2794301629093289991, 14644674442920170472, 1454611002923677775], [996935381157264665, 18222328370253421504, 16969488364377646596, 576577717553552933], [11904967017040196535, 12584827551678754252, 16477048850976772605, 2343373105547572995]),
            const_vesta([6168592891017086512, 2367907567265026874, 388026684105807154, 3606022282609435079], [3632540337412289627, 6998083133576939148, 7564681460433439147, 3950280527040465653], [2083491146042519556, 1548450512900629992, 8331516694038114867, 2031020002181593349]),
            const_vesta([12809180064183790416, 1629558430967740385, 5990141981184156644, 2575632277206873266], [12309840942450804021, 13672831121063760203, 10016445226380824609, 4183796266771755018], [2745121681349678714, 8763437163462534708, 11571318382293486895, 3401334041205615570]),
            const_vesta([14200466339241445996, 15152701372360871479, 15263176999353515285, 468958899487049219], [14043317241739642926, 16994676543279208790, 5566710897892760215, 1354496682622525784], [17740072258102604595, 2965614272603695444, 8422796511696469017, 2677897114879115166]),
        ],
        sigmas: [
            const_vesta([5335318130511898344, 365228012687837230, 11899160229304258830, 693313418855653275], [12864685117210238103, 11116125370348153226, 7118533411421073005, 3663192905800872017], [8649191628720589010, 5906382175266388632, 14348872126396827257, 3922561926372248822]),
            const_vesta([1994068565108327630, 13453833482086749082, 18285479766298707835, 337287960040646203], [6231266826984758988, 6517489031491210125, 11343690313503707827, 4550044839145344402], [18301476907909591155, 9960985601875360887, 16089166760721147911, 281270509202136170]),
            const_vesta([15804755850767002430, 1247906367799396206, 12080455149906867580, 3732896263207949712], [5772450990946023638, 7038970894493859823, 12403372755760442306, 1874266349251674618], [7244716108976545693, 13153763455134860050, 15579346341892558753, 1304827632329398547]),
            const_vesta([11870351599293466178, 16434905650780523432, 613257256637576574, 1039855446030222327], [11721949510089976322, 18011583048024214878, 8199569462061069959, 984483036724888881], [14980975589840329749, 11499427021663624582, 6312480913642426625, 2082877297002478580]),
            const_vesta([5731123485429960619, 17017487463231923098, 5015124242847574799, 1879073540049065771], [2357331522983810498, 441618057253843787, 26871855283676542, 4494700589074042164], [2158344414489977668, 14384459757423037702, 6816823121614005306, 3396208597066179694]),
            const_vesta([3312307954889604460, 6524037142216755033, 11017280382959479563, 3632959246043046946], [16964385212269449984, 7289642089615399914, 8594046203848043366, 4202920232075336473], [4718635950194242785, 12564810752964626847, 6737595969843092920, 1930947172302983029]),
            const_vesta([12809180064183790416, 1629558430967740385, 5990141981184156644, 2575632277206873266], [12309840942450804021, 13672831121063760203, 10016445226380824609, 4183796266771755018], [2745121681349678714, 8763437163462534708, 11571318382293486895, 3401334041205615570]),
            const_vesta([14200466339241445996, 15152701372360871479, 15263176999353515285, 468958899487049219], [14043317241739642926, 16994676543279208790, 5566710897892760215, 1354496682622525784], [17740072258102604595, 2965614272603695444, 8422796511696469017, 2677897114879115166]),
        ],
    }
};

fn deep_assert_circuit<P: PastaConfig>(x: PlonkCircuit<P>, y: PlonkCircuit<P>) {
    assert_eq!(x.rows, y.rows);
    assert_eq!(x.public_input_count, y.public_input_count);
    assert_eq!(x.omega, y.omega);
    for i in 0..x.Cs.qs.len() {
        assert_eq!(x.Cs.qs[i], y.Cs.qs[i]);
    }
    for i in 0..x.Cs.rs.len() {
        assert_eq!(x.Cs.rs[i], y.Cs.rs[i]);
    }
    for i in 0..x.Cs.ids.len() {
        assert_eq!(x.Cs.ids[i], y.Cs.ids[i]);
        assert_eq!(x.Cs.sigmas[i], y.Cs.sigmas[i]);
    }
}

pub struct IVCState {
    pk: PublicKey<PallasConfig>,
    sk: SecretKey<PallasConfig>,
    signature: SchnorrSignature<PallasConfig>,
    i: Scalar<PallasConfig>,
    fp_proof: PlonkProof<PallasConfig>,
    fp_public_input: PlonkPublicInputs<PallasConfig>,
    fq_proof: PlonkProof<VestaConfig>,
    fq_public_input: PlonkPublicInputs<VestaConfig>,
}
impl IVCState {
    pub fn init() -> Self {
        #[rustfmt::skip]
        let acc_0_pallas = Accumulator::from_instance(Instance {
            C: const_pallas([10679984719865548552, 1577745520676824291, 10061579248397805845, 323136554149832822], [14903787903255344307, 726810125502942546, 11830226734357691929, 3294303962081889955], [3780891978758094845, 11037255111966004397, 18446744073709551615, 4611686018427387903]),
            d: IVC_FP_CIRCUIT.rows - 1,
            z: const_fp([9139246570530516772, 13490551736776299038, 14621899496818622040, 45378195100388030]),
            v: const_fp([9431619214573130384, 11344662177567198833, 14040722259449445811, 668245632215337746]),
            pi: EvalProof {
                c: const_fp([14447137708365651377, 17786910309649769393, 5109633148488791220, 1497791781110110937]),
                U: const_pallas([12220079495614913101, 10228509476478408779, 709607594655662740, 1088614041403824209], [4454670314201842883, 1864803027360578863, 13052983043751551604, 3971289998410811619], [3780891978758094845, 11037255111966004397, 18446744073709551615, 4611686018427387903]),
                Ls: vec![
                    const_pallas([5572107883477721992, 8922016698313629953, 4762799630420891482, 2309681189543141953], [18093014468916949722, 474418614258676313, 12237056628997312987, 3461919082291953411], [17740684574366833890, 2680171789875849461, 9421107637432374541, 1383695086371222808]),
                    const_pallas([16199290845691592650, 15817354960040276389, 13955821219567728047, 3027438433824603047], [6776956680063101740, 1463563442689555547, 5719411026717173566, 2163501449602404006], [261745392781613855, 16886527113306167528, 9652981811279292842, 48276349898868133]),
                    const_pallas([1744675401486147010, 2341102532304530074, 12188860080588289966, 199114576532271882], [13006416256119625657, 16795806201515425991, 5477286024703668206, 4561568937124039067], [6980823689556283115, 15289962011968875977, 13663608842079452715, 3731758437486917655]),
                    const_pallas([5491351493805414737, 6602735288115362632, 6654012249145170494, 396374512321434416], [851401199777608889, 1562890797732768031, 3639935930254005409, 939480515497227371], [18372164662306412838, 11396771664821793246, 5283760811817909414, 3518902357245204850]),
                    const_pallas([7952030163766279780, 5138281334843101775, 1158431285348955350, 1856770478100541460], [15614047248419568095, 318784093666871583, 1422630115044513988, 2792412787930744901], [756250400846786239, 5947313904817128926, 7168074691895012111, 587131717232159193]),
                    const_pallas([2143587823215630852, 15707115210056921523, 5471729931606272358, 2632464318173878363], [2369388381281122041, 4789311307464214556, 16518504737916092582, 3220066834779626736], [9365887473480457855, 14298794793039971530, 10170465696529146023, 1776285686888009169]),
                    const_pallas([14001667281752917253, 17701450375538849960, 12067670342189928399, 2418465749748072513], [17860699914041854547, 9902683793981038618, 13193687307827777349, 3342889750509120606], [5764779946195487785, 6435652122725166456, 14030566201935473627, 1236423232662822166]),
                    const_pallas([15712840435642114002, 8964077977726985459, 17924854353278630607, 1846466808594348642], [11185395248248614409, 5051403867351892669, 9928786864126289816, 3784182644100193344], [15679402357434559721, 2012800344456578591, 486489733406546725, 3998480643237932687]),
                    const_pallas([9120710086086667542, 2089346634677984143, 1639887474739682027, 1080332543773770523], [1300896885186368194, 6503691838697835865, 7258965234991660938, 1687846672856825553], [4843531912791332422, 2969434463240803284, 8940857260522028458, 1204093225136543462]),
                    const_pallas([13712862289283345124, 7591912737249400264, 11753549199381153046, 2162398451126939932], [10307637079968513275, 11833502664403974737, 7088361661693059710, 1668500761275722685], [721997817135120348, 6057884049978987235, 13948352100744611736, 3815741312123320669]),
                    const_pallas([10525086216030290958, 3753508941387323442, 11223666473124304855, 50511984369689228], [15765404732628242447, 16400402377017355655, 5302332010539186216, 4253916617483859477], [8399427141197987799, 1290532715981057938, 18286327974499663038, 2472077894177831783]),
                    const_pallas([10123975803331913057, 7045200909963904398, 13144612752321005992, 3526475289674154886], [7419782281424815907, 1809549701901329834, 13957913326021824292, 1209609980889495054], [2742039777932271993, 3099627133986058011, 8716528456181331261, 4161601328758896872]),
                    const_pallas([14280898213295563486, 4765359106155005144, 9546722672468990648, 686219980001310998], [14076018417787571972, 425213352470018277, 11292125890673776049, 3376897117369459570], [7401843528854696809, 18024601303387554579, 2825840584487285707, 1862475072185489167]),
                    const_pallas([4998664217035771957, 17977381871333653088, 7443262442169524348, 1092501259361837202], [3002123094158079690, 563918353320820094, 5852951318942729474, 2384011224144574251], [3932225677753158833, 1816974063821289120, 15142313089478908526, 4351294563032219897]),
                    const_pallas([5197723484650607537, 6279419608167556114, 14548942649484859994, 1930315075949850361], [13063515952100150243, 7172082217766554094, 8829966915915980591, 2118726680145390870], [17629951078568138372, 5183236357880509686, 13191608265281558145, 4031797639421588648]),
                    const_pallas([7432499755840300703, 7788072242004029234, 18270723895584668693, 72766746164829956], [5447182144876051599, 7791810478173116472, 17155586391040233532, 2056429577043675622], [9647493887595718259, 12589581081672913506, 6138118544515312736, 3645514147369313012]),
                ],
                Rs: [
                    const_pallas([5230979577793302885, 9040396266707248970, 15059047338335327893, 1616618143719162632], [1264006847318526155, 17170298544303597349, 13819741331083244421, 4064839794191494980], [122549026985893942, 5424976207438970449, 12511930385892211189, 2762618455348080529]),
                    const_pallas([4223709412366673527, 17839908225774599549, 9481713877031615731, 1750847072410816569], [2544182976731856565, 18191224194817806320, 11658935842716131358, 1184088895923572538], [442702195957211727, 10143684495645514849, 13105570294341451623, 2127991890578994939]),
                    const_pallas([16542746594909565747, 9728148907530593009, 16267119088380209853, 3057335609626712199], [2513477907946886277, 12196376261650034247, 6118021402204800656, 3262561317675569101], [14378312507777974582, 5927136032869502961, 3706198084214511538, 1498096649392087245]),
                    const_pallas([2815190447545947878, 7067658193459652921, 9740006881691711137, 1510936844646697309], [17622475489089397152, 10838327390749655243, 13224062001691515726, 2472276135230853436], [15297638617435168557, 14719668780641311724, 5348555804086696286, 293628184313809100]),
                    const_pallas([15604133345562640964, 17849225077409556837, 10955405707220069766, 1543579621265532366], [15420178591592804296, 8245190082813076059, 2122046556706504299, 2929273901909903491], [6415727873778530221, 6047144038297490213, 6867682015439649462, 1024746839033679604]),
                    const_pallas([212191348939906348, 2548946993837188580, 14088499600069543250, 2159535210475653611], [7153595712320599133, 1031465251632907978, 15352967369717753055, 178480319698152553], [5748640457629753583, 11505593568306736534, 5182633816106286413, 2382507569430159950]),
                    const_pallas([12280696083741244337, 5469401249243947974, 4695740496474110420, 1987947346716314522], [11634639506441400860, 11816242937510966514, 17955197496964703738, 1786328337206755561], [118664435661961068, 92680379364419405, 5239758689952141245, 2309366960446800534]),
                    const_pallas([14755762479209850738, 2829994575950819316, 15282905691897609037, 1143780632853422993], [1733679767392435359, 1934192367744159189, 9029496827876381004, 864546762566184946], [4195259065122041261, 8425914059367381053, 5269262791416341758, 2042206791304000570]),
                    const_pallas([13385189990610149262, 5993921892144174641, 16500082434469244547, 457833180442978113], [5307293301557484411, 5923300988886845096, 3282903769397986264, 1058608300253034465], [8295673325931209355, 15489043608318354483, 14342223836008194564, 3016851071581167145]),
                    const_pallas([11175197482721023505, 17678172899404089512, 11892042260031452795, 3836956123219436101], [3942284543444794878, 14861236846730767117, 1270923277033108736, 337295008121648628], [13965300356598157286, 3656760006952735867, 9395793469868385807, 2128403393680193008]),
                    const_pallas([10235772313494732810, 5507689458931787551, 18372558039620040515, 3085676597670067531], [9993823118059246191, 17586821376842704934, 17891623774302064785, 757016980737494202], [14329888992900850382, 8361987236609791816, 12837546929082469639, 199942073248895268]),
                    const_pallas([5931970616548511414, 17339869141816850528, 4844224323775342927, 4073280192865912906], [215951213158744654, 8000364669188133484, 4731003962686001730, 1419455858991645448], [12313087375352176497, 5621006365810914073, 10682354942614319187, 1088645197732150123]),
                    const_pallas([8729594944195119048, 6611268302472953375, 9355889013222448518, 2130452434180195023], [16938562029210485704, 6092396183903673150, 15611040208270873151, 3656790017989014881], [8775860442588127265, 9410267439299741340, 8966958412841423646, 140764060342391514]),
                    const_pallas([15571870726300075603, 2628091065550958887, 3937898493457433223, 1694458990143939632], [10504177058872448079, 6803276319365203625, 9225248553991087171, 3867470334216806017], [15068594857333769839, 11605043946983599714, 13294806833985689990, 698776554250769225]),
                    const_pallas([10181645305136196737, 11076214819484098716, 3747714593609715083, 2593971170198418714], [9177370916693235490, 5160703147556508211, 16807671693761562765, 1983086329739549923], [218601725859999578, 12367035970775163625, 17979419182386158660, 577025320188932544]),
                    const_pallas([9844193515996852278, 1779080447629914523, 16592252180741471695, 1841692498374792309], [7472461750399023432, 837648944137361372, 2475040907248140264, 1892990642652038326], [15027839929306173317, 3386933308163885683, 18396599624887870624, 661635262290602993]),
                ].to_vec(),
                C_bar: None,
                w_prime: None,
            }
        });
        #[rustfmt::skip]
        let acc_0_vesta = Accumulator::from_instance(Instance {
            C: const_vesta([13415048839635110922, 13964244580218556318, 17849161721661140313, 4345245586663353208], [11000105338062579051, 656549696303050141, 11401732997716781739, 1024257057500844796], [6569413325480787965, 11037255111951910247, 18446744073709551615, 4611686018427387903]),
            d: IVC_FQ_CIRCUIT.rows - 1,
            z: const_fq([16719976478874685934, 5662497786953171511, 12577769317301063221, 587576397223412991]),
            v: const_fq([11429459091698035574, 10062949663517057157, 1782932709112947164, 435354346760103008]),
            pi: EvalProof {
                c: const_fq([15229161013616981775, 15399382938937825893, 7976740983574755222, 3756198403039240165]),
                U: const_vesta([9616732935926125164, 16142227008234719551, 12558594345767675134, 3871324599046738428], [16836208205296582836, 17863778209381298982, 15913968060931336944, 172817301933212542], [6569413325480787965, 11037255111951910247, 18446744073709551615, 4611686018427387903]),
                Ls: vec![
                    const_vesta([2966134234962659979, 5131084812448356213, 607367576003570419, 1847119406467739216], [7794511819283306547, 2247230871493143263, 3684533018346063351, 1894682110537642282], [12232490864311329360, 4378426263266483289, 6196145561372011464, 4435635286195409408]),
                    const_vesta([586805910624321903, 149899988878521168, 2738410994267070325, 2364221331582161488], [8003988296267088953, 16562155583159694756, 6427258158089777651, 119101007883421204], [17177669636640580265, 6124642834049458280, 2623789825701150830, 1248334098796121378]),
                    const_vesta([13540405574318459470, 7508384342941565028, 15013118528625179135, 761999642231846298], [4637462055894373932, 11372048135655067060, 1430654386608739918, 1544647586776751602], [12883978819237134593, 8334546232912607765, 11954270107446179935, 1585816618953291394]),
                    const_vesta([11687189043057668879, 15439342904317155174, 2151341186709288677, 3616277414075588860], [5554966506792569062, 10176535385513494710, 4764112279965733050, 3192425524629622938], [15038562306471846019, 17903709335404169114, 7934424993109581983, 191715665413063990]),
                    const_vesta([18185563637553013904, 12652583890086977762, 1721154252998174692, 3264637475226933995], [9307566778668724011, 13656189252998889728, 1541586890469936016, 1838020106250653405], [3780264022271223293, 1926292625126767680, 17169156798433155568, 391554418001254179]),
                    const_vesta([1492559406712451763, 204501030395975605, 4968868175889328301, 1620869688636673528], [9681751420995932187, 17166051417284185716, 16625921707986863522, 3380200956480134834], [3552750601587079698, 10796746239285227908, 3589991263232620303, 4305159762482347606]),
                    const_vesta([9101560510442318765, 2245009810851028757, 4291071311862869297, 770234985476883270], [8453665965723288194, 4747401812538212524, 5958820862982392922, 1477067069125115142], [2648792431390334995, 18324486087924343833, 13542587030669278329, 4556517782826635310]),
                    const_vesta([4175078979235855988, 7921222525247932777, 2202448150445731674, 3651636649093420242], [16780833738863556381, 18363897563559999167, 9356900094039740966, 1659887676411151160], [14218881812589384069, 16670940209442943307, 16467176997589818710, 59957619701694478]),
                    const_vesta([271380828936255452, 10018033174649150610, 6439941821911009572, 1153059272080813804], [11112272699876612716, 8913906136026425758, 907241143353401414, 2187212580460399373], [13240735614593998809, 9708480449019411738, 12807111444154933955, 386595270726848711]),
                    const_vesta([17435433737710058886, 13219691389055972270, 6342799698412610750, 4103079845004612090], [17435333508668194637, 1293256042066692678, 1117090069404504082, 432081977078578717], [8643210932648779151, 16159284137471806331, 18276379494834360805, 1291098191386160982]),
                    const_vesta([5825619767071689657, 17665402981660464519, 16885148838017941455, 1152924980694853077], [10357142908383433894, 3256977955584100715, 6948652173714762400, 2802372989484001128], [9485538766518630076, 6141551029650327917, 13670285042884967131, 311763072125546367]),
                    const_vesta([16072937095707048791, 14153446060943997230, 7924715904469994281, 769133675647968868], [1000488429663273804, 15693468990860810146, 1306148269324444579, 562221137879798426], [18331523959822605919, 16622183267676763382, 7764691934235532719, 2320832873833889389]),
                    const_vesta([6052202772202714667, 14023869276224527536, 4580537316133231855, 2222812029775167094], [3149083544375297908, 17636348315355488720, 17722501289906878794, 4165782412185717538], [16541793770386665576, 16582657056389310163, 10017159445665451664, 3802422179436108721]),
                    const_vesta([17182325220642938083, 10584617732239500218, 868877475085800685, 3019767575081037284], [14341133093356490202, 13475592277226466576, 1734902312744177581, 541097443809711701], [2607558827152613299, 11373022777979370629, 8620953417165450211, 3783148418859603284]),
                    const_vesta([3281001984545148811, 16117576578484937644, 5635995222234468705, 3765587181107455756], [10602727970944837085, 10913656952049012563, 14788223526631748198, 810649947821634906], [12611711741474630886, 1569749009088904923, 13999514452593807645, 3393381346475738834]),
                    const_vesta([2390978756776929731, 15131968125626328769, 13851758025591239861, 1669866543601737751], [15056847491314061211, 16020680652088289214, 1139059643085189658, 2374759433989644464], [17105102437061491952, 10908690155553530147, 16345096856517074489, 3556582401493119902]),
                ],
                Rs: vec![
                    const_vesta([2638620042036555606, 17739164503239694194, 18362178376542541783, 2697578145013361441], [441764041450869980, 2818707100813010786, 13551698471832007440, 4154320343497041287], [11496386484652957278, 17051573172670585319, 7888818335780867121, 1623407021261094476]),
                    const_vesta([13776633790320375286, 2262909771616164268, 1226371233608869745, 415017742713791161], [15130951597000081778, 7790637969049428932, 17141725369255624062, 1343053012297574709], [4547087733461566386, 7991402690709030545, 14214501686684872445, 1163531799773315172]),
                    const_vesta([9259534629194256825, 18369101582882586157, 7943601504717409178, 1211147841427133140], [7550319213228250423, 9239347858037563427, 15237070699676683928, 3660701593112534653], [2734638785247977917, 817184190286750891, 4958256574574125591, 510510879423633343]),
                    const_vesta([5788482595006743011, 8612002867297420333, 7636525699318380697, 3463887967327438736], [18040306570578124936, 13515102812851136151, 7614587152734120174, 4189813265891536818], [17400953939080118301, 17097450196926919897, 7321689543196652699, 1517722446129536247]),
                    const_vesta([17616853920448346074, 1401951452193669435, 17666098659027565316, 3291524449053948326], [11712806255389470585, 12817818936077996795, 16503932497467290849, 3753544492337131491], [828823237771284583, 11744565387125363380, 2806469107954451759, 298520811344136184]),
                    const_vesta([11193732713867553400, 4280688598387645365, 14305357775428685118, 4238217169810559022], [17580088896125074921, 9599245253368310357, 16351755768373990758, 676189588720031825], [11450973846228746290, 9950325215427587356, 8043484534614275706, 4584451916305456353]),
                    const_vesta([1102813617725496275, 6758683255335759609, 8146792804476131345, 1065940643418207468], [8165440945411789064, 12234519806412671568, 10410870755594160678, 1602999072190563635], [3152771821232669768, 14134828317161243223, 11123042130026479066, 3478097765656647485]),
                    const_vesta([17538486535997165775, 14909742859841314806, 13179534806394321422, 3090102020291404704], [2096625701315456923, 12835375900326856603, 6112332461506347168, 2896577673067436759], [17589041074029618856, 2235225001430050993, 10892982144199479988, 1012756515343132475]),
                    const_vesta([2205863019349964954, 17513794674885567672, 4566104158809974244, 3416193210950118936], [13819248169791260995, 14104759477836130499, 16502812977805317232, 2448235238689967095], [16051421250706879609, 15481140052567585327, 16657527562466980338, 2007300318352075863]),
                    const_vesta([18362642336647456855, 13182771688998965426, 17500452473078034536, 1776221685144749733], [4704432862931997557, 17035797482559198455, 17396567352774054849, 2239403508362624534], [14406697302483955927, 10492447061218032703, 6138899543209413014, 3701372172812333278]),
                    const_vesta([11253798444140669182, 6207758882076210618, 5007333528735430237, 1757924732566275869], [6696230740179285430, 2591971829441254533, 11602587354932001075, 1908900239790946934], [15934415223942227411, 13496897966685642403, 5569551835074304421, 973494835633719707]),
                    const_vesta([1607937794122444582, 15455155163529742301, 15583858911876554147, 326044889829738585], [3007508654028108095, 5895394073098786621, 17165776138514480992, 1859365334327776947], [4895984867704417125, 8194963889149772874, 7270374075413548160, 1389037350548209267]),
                    const_vesta([17519873758018227446, 14148974169738952372, 4017331440099941809, 3731614092308126283], [1716408210337112921, 6436174164967108863, 13453153981129266584, 3915295461486550950], [3347580697214397855, 11489343967678946118, 4721648354417313847, 3523658467382049292]),
                    const_vesta([11265602799295283139, 17385917024678376766, 12104928416669327332, 3463320603640596668], [16316358355772292129, 14792535935817595522, 9299167817986065360, 318365015418823353], [15246738460540613106, 4387216866846642804, 3023774477007917979, 1419701060222177809]),
                    const_vesta([5561032538283045489, 12102927463435636477, 10447825712309986515, 4600707796945156228], [16912726090081096187, 5642474359864104654, 16856796662390163962, 848462100612715136], [2618276380688609208, 4955481418273551168, 7701316057270121124, 4021773325903816241]),
                    const_vesta([1533298564863494649, 4700591064835655259, 8684499604688314263, 1525669877152937460], [4666956686713449786, 15636203253062188918, 636191903958168465, 2853601767260835748], [2715898231367255651, 13361999233160039019, 16689689037966572455, 2676200285809741501]),
                ],
                C_bar: None,
                w_prime: None,
            }
        });

        let rows = IVC_FP_CIRCUIT.rows;
        let fp_public_input_count = IVC_FP_CIRCUIT.public_input_count;
        let fq_public_input_count = IVC_FQ_CIRCUIT.public_input_count;

        // let acc_0_pallas = Accumulator::zero(rows, 1);
        // let acc_0_vesta = Accumulator::zero(rows, 1);

        // println!("ACC_0_PALLAS: Accumulator<PallasConfig> = {{");
        // let Cx: Fq = acc_0_pallas.q.C.x;
        // let Cy: Fq = acc_0_pallas.q.C.y;
        // let Cz: Fq = acc_0_pallas.q.C.z;
        // println!(
        //     "    C: const_pallas({:?}, {:?}, {:?}),",
        //     Cx.0.0, Cy.0.0, Cz.0.0
        // );
        // let z: Fp = acc_0_pallas.q.z;
        // let v: Fp = acc_0_pallas.q.v;
        // let c: Fp = acc_0_pallas.q.pi.c;
        // let Ux: Fq = acc_0_pallas.q.pi.U.x;
        // let Uy: Fq = acc_0_pallas.q.pi.U.y;
        // let Uz: Fq = acc_0_pallas.q.pi.U.z;
        // println!("    z: const_fp({:?}),", z.0.0);
        // println!("    v: const_fp({:?}),", v.0.0);
        // println!("    pi: EvalProof {{");
        // println!("        c: {:?},", c.0.0);
        // println!(
        //     "        U: const_pallas({:?}, {:?}, {:?}),",
        //     Ux.0.0, Uy.0.0, Uz.0.0
        // );
        // println!("        Ls: [");
        // for i in 0..acc_0_pallas.q.pi.Ls.len() {
        //     let Lx: Fq = acc_0_pallas.q.pi.Ls[i].x;
        //     let Ly: Fq = acc_0_pallas.q.pi.Ls[i].y;
        //     let Lz: Fq = acc_0_pallas.q.pi.Ls[i].z;
        //     println!(
        //         "            const_pallas({:?}, {:?}, {:?}),",
        //         Lx.0.0, Ly.0.0, Lz.0.0
        //     );
        // }
        // println!("        ],");
        // println!("        Rs: [");
        // for i in 0..acc_0_pallas.q.pi.Rs.len() {
        //     let Rx: Fq = acc_0_pallas.q.pi.Rs[i].x;
        //     let Ry: Fq = acc_0_pallas.q.pi.Rs[i].y;
        //     let Rz: Fq = acc_0_pallas.q.pi.Rs[i].z;
        //     println!(
        //         "            const_pallas({:?}, {:?}, {:?}),",
        //         Rx.0.0, Ry.0.0, Rz.0.0
        //     );
        // }
        // println!("        ],");
        // println!("        C_bar: None,");
        // println!("        w_prime: None,");
        // println!("    }}");
        // println!("}}");

        // println!("ACC_0_VESTA: Accumulator<VestaConfig> = {{");
        // let Cx: Fp = acc_0_vesta.q.C.x;
        // let Cy: Fp = acc_0_vesta.q.C.y;
        // let Cz: Fp = acc_0_vesta.q.C.z;
        // println!(
        //     "    C: const_vesta({:?}, {:?}, {:?}),",
        //     Cx.0.0, Cy.0.0, Cz.0.0
        // );
        // let z: Fq = acc_0_vesta.q.z;
        // let v: Fq = acc_0_vesta.q.v;
        // let c: Fq = acc_0_vesta.q.pi.c;
        // let Ux: Fp = acc_0_vesta.q.pi.U.x;
        // let Uy: Fp = acc_0_vesta.q.pi.U.y;
        // let Uz: Fp = acc_0_vesta.q.pi.U.z;
        // println!("    z: const_fq({:?}),", z.0.0);
        // println!("    v: const_fq({:?}),", v.0.0);
        // println!("    pi: EvalProof {{");
        // println!("        c: {:?},", c.0.0);
        // println!(
        //     "        U: const_vesta({:?}, {:?}, {:?}),",
        //     Ux.0.0, Uy.0.0, Uz.0.0
        // );
        // println!("        Ls: [");
        // for i in 0..acc_0_vesta.q.pi.Ls.len() {
        //     let Lx: Fp = acc_0_vesta.q.pi.Ls[i].x;
        //     let Ly: Fp = acc_0_vesta.q.pi.Ls[i].y;
        //     let Lz: Fp = acc_0_vesta.q.pi.Ls[i].z;
        //     println!(
        //         "            const_vesta({:?}, {:?}, {:?}),",
        //         Lx.0.0, Ly.0.0, Lz.0.0
        //     );
        // }
        // println!("        ],");
        // println!("        Rs: [");
        // for i in 0..acc_0_vesta.q.pi.Rs.len() {
        //     let Rx: Fp = acc_0_vesta.q.pi.Rs[i].x;
        //     let Ry: Fp = acc_0_vesta.q.pi.Rs[i].y;
        //     let Rz: Fp = acc_0_vesta.q.pi.Rs[i].z;
        //     println!(
        //         "            const_vesta({:?}, {:?}, {:?}),",
        //         Rx.0.0, Ry.0.0, Rz.0.0
        //     );
        // }
        // println!("        ],");
        // println!("        C_bar: None,");
        // println!("        w_prime: None,");
        // println!("    }}");
        // println!("}}");

        let (sk_init, _) = generate_keypair();
        let (sk, pk) = generate_keypair();
        Self {
            signature: sk_init.sign(&[pk.0.y().unwrap(), pk.0.x().unwrap()]),
            pk,
            sk,
            i: <PallasConfig as CurveConfig>::ScalarField::zero(),
            fp_proof: PlonkProof {
                vs: PlonkProofEvals {
                    ws: array::from_fn(|_| Scalar::<PallasConfig>::zero()),
                    rs: array::from_fn(|_| Scalar::<PallasConfig>::zero()),
                    qs: array::from_fn(|_| Scalar::<PallasConfig>::zero()),
                    ts: array::from_fn(|_| Scalar::<PallasConfig>::zero()),
                    ids: array::from_fn(|_| Scalar::<PallasConfig>::zero()),
                    sigmas: array::from_fn(|_| Scalar::<PallasConfig>::zero()),
                    z: Scalar::<PallasConfig>::zero(),
                    z_omega: Scalar::<PallasConfig>::zero(),
                    w_omegas: array::from_fn(|_| Scalar::<PallasConfig>::zero()),
                },
                Cs: PlonkProofCommitments {
                    ws: array::from_fn(|_| Affine::<PallasConfig>::identity().into()),
                    ts: array::from_fn(|_| Affine::<PallasConfig>::identity().into()),
                    z: Affine::<PallasConfig>::identity().into(),
                },
                pis: PlonkProofEvalProofs {
                    r: Instance::<PallasConfig>::zero_invalid(rows).pi,
                    r_omega: Instance::<PallasConfig>::zero_invalid(rows).pi,
                },
                acc_next: acc_0_pallas.clone(),
            },
            fq_proof: PlonkProof {
                vs: PlonkProofEvals {
                    ws: array::from_fn(|_| Scalar::<VestaConfig>::zero()),
                    rs: array::from_fn(|_| Scalar::<VestaConfig>::zero()),
                    qs: array::from_fn(|_| Scalar::<VestaConfig>::zero()),
                    ts: array::from_fn(|_| Scalar::<VestaConfig>::zero()),
                    ids: array::from_fn(|_| Scalar::<VestaConfig>::zero()),
                    sigmas: array::from_fn(|_| Scalar::<VestaConfig>::zero()),
                    z: Scalar::<VestaConfig>::zero(),
                    z_omega: Scalar::<VestaConfig>::zero(),
                    w_omegas: array::from_fn(|_| Scalar::<VestaConfig>::zero()),
                },
                Cs: PlonkProofCommitments {
                    ws: array::from_fn(|_| Affine::<VestaConfig>::identity().into()),
                    ts: array::from_fn(|_| Affine::<VestaConfig>::identity().into()),
                    z: Affine::<VestaConfig>::identity().into(),
                },
                pis: PlonkProofEvalProofs {
                    r: Instance::<VestaConfig>::zero_invalid(rows).pi,
                    r_omega: Instance::<VestaConfig>::zero_invalid(rows).pi,
                },
                acc_next: acc_0_vesta.clone(),
            },
            fp_public_input: PlonkPublicInputs {
                public_inputs: (0..fp_public_input_count)
                    .map(|_| Scalar::<PallasConfig>::zero())
                    .collect(),
                acc_prev: acc_0_pallas,
            },
            fq_public_input: PlonkPublicInputs {
                public_inputs: (0..fq_public_input_count)
                    .map(|_| Scalar::<VestaConfig>::zero())
                    .collect(),
                acc_prev: acc_0_vesta,
            },
        }
    }

    pub fn print_ivc_circuit() -> Result<(Trace<PallasConfig>, Trace<VestaConfig>)> {
        let rows = IVC_FP_CIRCUIT.rows;
        let fp_public_input_count = IVC_FP_CIRCUIT.public_input_count;
        let fq_public_input_count = IVC_FQ_CIRCUIT.public_input_count;
        let ivc_state = Self::init();
        let fp_dummy_circuit =
            WireIVCState::circuit_dummy::<PallasConfig>(rows, fp_public_input_count);
        let fq_dummy_circuit =
            WireIVCState::circuit_dummy::<VestaConfig>(rows, fq_public_input_count);

        let wire_fp_circuit = WirePlonkCircuit::public_input(rows, fp_public_input_count);
        let wire_fq_circuit = WirePlonkCircuit::public_input(rows, fq_public_input_count);
        let wire_ivc_state = WireIVCState::witness();
        let wire_pk_next = WireAffine::witness();
        wire_ivc_state
            .clone()
            .ivc_circuit(wire_fp_circuit, wire_fq_circuit, wire_pk_next);

        let mut call = Call::new();
        call.public_input_plonk_circuit(&wire_fp_circuit, &fp_dummy_circuit)?;
        call.public_input_plonk_circuit(&wire_fq_circuit, &fq_dummy_circuit)?;
        call.witness_ivc_state(&wire_ivc_state, &ivc_state)?;
        call.witness_affine(wire_pk_next, Affine::identity())?;

        let (fp_trace, fq_trace) = call.trace()?;
        let (fp_circuit, _, _) = fp_trace.clone().consume();
        let (fq_circuit, _, _) = fq_trace.clone().consume();

        // deep_assert_circuit(fp_circuit, IVC_FP_CIRCUIT);
        // deep_assert_circuit(fq_circuit, IVC_FQ_CIRCUIT);

        let PlonkCircuit {
            rows,
            public_input_count,
            omega,
            Cs,
        } = fp_circuit;
        let PlonkCircuitCommitments {
            qs,
            rs,
            ids,
            sigmas,
        } = Cs;
        println!("PlonkCircuit {{");
        println!("    rows: {},", rows);
        println!("    public_input_count: {},", public_input_count);
        println!("    omega: const_fp({:?}),", omega.0.0);
        println!("    Cs: PlonkCircuitCommitments {{");
        println!("        qs: [");
        for q in qs {
            println!(
                "            const_pallas({:?}, {:?}, {:?}),",
                q.x.0.0, q.y.0.0, q.z.0.0
            );
        }
        println!("        ],");
        println!("        rs: [");
        for r in rs {
            println!(
                "            const_pallas({:?}, {:?}, {:?}),",
                r.x.0.0, r.y.0.0, r.z.0.0
            );
        }
        println!("        ],");
        println!("        ids: [");
        for id in ids {
            println!(
                "            const_pallas({:?}, {:?}, {:?}),",
                id.x.0.0, id.y.0.0, id.z.0.0
            );
        }
        println!("        ],");
        println!("        sigmas: [");
        for sigma in sigmas {
            println!(
                "            const_pallas({:?}, {:?}, {:?}),",
                sigma.x.0.0, sigma.y.0.0, sigma.z.0.0
            );
        }
        println!("        ],");
        println!("    }}");
        println!("}}");

        let PlonkCircuit {
            rows,
            public_input_count,
            omega,
            Cs,
        } = fq_circuit;
        let PlonkCircuitCommitments {
            qs,
            rs,
            ids,
            sigmas,
        } = Cs;
        println!("PlonkCircuit {{");
        println!("    rows: {},", rows);
        println!("    public_input_count: {},", public_input_count);
        println!("    omega: const_fq({:?}),", omega.0.0);
        println!("    Cs: PlonkCircuitCommitments {{");
        println!("        qs: [");
        for q in qs {
            println!(
                "            const_vesta({:?}, {:?}, {:?}),",
                q.x.0.0, q.y.0.0, q.z.0.0
            );
        }
        println!("        ],");
        println!("        rs: [");
        for r in rs {
            println!(
                "            const_vesta({:?}, {:?}, {:?}),",
                r.x.0.0, r.y.0.0, r.z.0.0
            );
        }
        println!("        ],");
        println!("        ids: [");
        for id in ids {
            println!(
                "            const_vesta({:?}, {:?}, {:?}),",
                id.x.0.0, id.y.0.0, id.z.0.0
            );
        }
        println!("        ],");
        println!("        sigmas: [");
        for sigma in sigmas {
            println!(
                "            const_vesta({:?}, {:?}, {:?}),",
                sigma.x.0.0, sigma.y.0.0, sigma.z.0.0
            );
        }
        println!("        ],");
        println!("    }}");
        println!("}}");

        Frontend::reset();

        Ok((fp_trace, fq_trace))
    }

    pub fn prove(&self) -> Result<Self> {
        let rng = &mut test_rng();

        let rows = IVC_FP_CIRCUIT.rows;
        let fp_public_input_count = IVC_FP_CIRCUIT.public_input_count;
        let fq_public_input_count = IVC_FQ_CIRCUIT.public_input_count;

        let state = self;
        let (sk_next, pk_next) = generate_keypair();
        let signature_next = state
            .sk
            .sign(&[pk_next.0.x().unwrap(), pk_next.0.y().unwrap()]);

        let wire_circuit_fp = WirePlonkCircuit::public_input(rows, fp_public_input_count);
        let wire_circuit_fq = WirePlonkCircuit::public_input(rows, fq_public_input_count);
        let wire_pk_next = WireAffine::witness();
        let wire_state = WireIVCState::witness();
        wire_state.ivc_circuit(wire_circuit_fp, wire_circuit_fq, wire_pk_next);

        let mut call = Call::new();

        call.public_input_plonk_circuit(&wire_circuit_fp, &IVC_FP_CIRCUIT)?;
        call.public_input_plonk_circuit(&wire_circuit_fq, &IVC_FQ_CIRCUIT)?;
        call.witness_affine(wire_pk_next, pk_next.0)?;
        call.witness_ivc_state(&wire_state, &state)?;

        let accs = Some((
            state.fp_public_input.acc_prev.clone(),
            state.fq_public_input.acc_prev.clone(),
        ));
        let static_circuits = Some((IVC_FP_CIRCUIT, IVC_FQ_CIRCUIT));
        let (fp_trace, fq_trace) = call.trace_with_params(accs, static_circuits)?;

        let (fp_circuit, fp_x, fp_w) = fp_trace.clone().consume();
        let (fq_circuit, fq_x, fq_w) = fq_trace.consume();

        deep_assert_circuit(fp_circuit, IVC_FP_CIRCUIT);
        deep_assert_circuit(fq_circuit, IVC_FQ_CIRCUIT);

        Frontend::reset();

        let fp_pi = PlonkProof::naive_prover(rng, fp_circuit, &fp_x, fp_w);
        let fq_pi = PlonkProof::naive_prover(rng, fq_circuit, &fq_x, fq_w);

        fp_pi.verify(fp_circuit, &fp_x).unwrap();
        fq_pi.verify(fq_circuit, &fq_x).unwrap();

        Ok(Self {
            pk: pk_next,
            sk: sk_next,
            signature: signature_next,
            i: self.i + Scalar::<PallasConfig>::one(),
            fp_proof: fp_pi,
            fp_public_input: fp_x,
            fq_proof: fq_pi,
            fq_public_input: fq_x,
        })
    }

    pub fn verify(&self) -> Result<()> {
        if self.i.is_zero() {
            return Ok(());
        }

        self.fp_proof
            .verify(IVC_FP_CIRCUIT, &self.fp_public_input)?;
        self.fq_proof.verify(IVC_FQ_CIRCUIT, &self.fq_public_input)
    }
}

#[derive(Clone)]
pub struct WireIVCState {
    pk: WirePublicKey<PallasConfig>,
    signature: WireSchnorrSignature<PallasConfig>,
    i: WireScalar<PallasConfig>,
    fp_proof: WirePlonkProof<PallasConfig>,
    fp_public_input: WirePlonkPublicInputs<PallasConfig>,
    fq_proof: WirePlonkProof<VestaConfig>,
    fq_public_input: WirePlonkPublicInputs<VestaConfig>,
}
impl WireIVCState {
    pub fn witness() -> Self {
        let rows = IVC_FP_CIRCUIT.rows;
        let fp_public_input_count = IVC_FP_CIRCUIT.public_input_count;
        let fq_public_input_count = IVC_FQ_CIRCUIT.public_input_count;

        let prev_pi_fp = WirePlonkProof::witness(rows);
        let prev_pi_fq = WirePlonkProof::witness(rows);

        let prev_x_fp = WirePlonkPublicInputs::witness(rows, fp_public_input_count);
        let prev_x_fq = WirePlonkPublicInputs::witness(rows, fq_public_input_count);
        let prev_i = WireScalar::witness();
        let signature = WireSchnorrSignature::witness();
        let pk_next = WirePublicKey::witness();

        Self {
            pk: pk_next,
            i: prev_i,
            signature,
            fp_proof: prev_pi_fp,
            fp_public_input: prev_x_fp,
            fq_proof: prev_pi_fq,
            fq_public_input: prev_x_fq,
        }
    }

    fn circuit_dummy<P: PastaConfig>(rows: usize, public_input_count: usize) -> PlonkCircuit<P> {
        let rng = &mut thread_rng();
        PlonkCircuit {
            rows,
            public_input_count,
            omega: P::scalar_from_u64(rows as u64),
            Cs: PlonkCircuitCommitments {
                qs: array::from_fn(|_| Point::<P>::rand(rng)),
                rs: array::from_fn(|_| Point::<P>::rand(rng)),
                ids: array::from_fn(|_| Point::<P>::rand(rng)),
                sigmas: array::from_fn(|_| Point::<P>::rand(rng)),
            },
        }
    }

    pub fn ivc_circuit(
        &self,
        circuit_fp: WirePlonkCircuit<PallasConfig>,
        circuit_fq: WirePlonkCircuit<VestaConfig>,
        pk_next: WirePublicKey<PallasConfig>,
    ) -> WireBool<PallasConfig> {
        let c1_fp = self
            .fp_proof
            .verify_succinct(circuit_fp, self.fp_public_input.clone());
        let c1_fq = self
            .fq_proof
            .verify_succinct(circuit_fq, self.fq_public_input.clone())
            .message_pass();
        let c1 = c1_fp & c1_fq;
        let c2 = self.i.equals(WireScalar::zero());
        let c3 = self
            .signature
            .verify(self.pk, &[pk_next.x, pk_next.y])
            .message_pass();

        (c1 | c2) & c3
    }
}

pub trait CallIVCState {
    fn witness_ivc_state(&mut self, wire_state: &WireIVCState, state: &IVCState) -> Result<()>;
    fn public_input_ivc_state(&mut self, wire_state: WireIVCState, state: IVCState) -> Result<()>;
}
impl CallIVCState for Call {
    fn witness_ivc_state(&mut self, wire_state: &WireIVCState, state: &IVCState) -> Result<()> {
        let WireIVCState {
            pk,
            signature,
            i,
            fp_proof,
            fp_public_input,
            fq_proof,
            fq_public_input,
        } = wire_state;

        self.witness_affine(*pk, state.pk.0)?;
        self.witness_signature(*signature, state.signature)?;
        self.witness(*i, state.i)?;
        self.witness_plonk_proof(fp_proof, &state.fp_proof)?;
        self.witness_plonk_public_input(fp_public_input, &state.fp_public_input)?;
        self.witness_plonk_proof(fq_proof, &state.fq_proof)?;
        self.witness_plonk_public_input(&fq_public_input, &state.fq_public_input)?;

        Ok(())
    }
    fn public_input_ivc_state(&mut self, wire_state: WireIVCState, state: IVCState) -> Result<()> {
        let WireIVCState {
            pk,
            signature,
            i,
            fp_proof,
            fp_public_input,
            fq_proof,
            fq_public_input,
        } = wire_state;

        self.public_input_affine(pk, state.pk.0)?;
        self.public_input_signature(signature, state.signature)?;
        self.public_input(i, state.i)?;
        self.public_input_plonk_proof(fp_proof, state.fp_proof)?;
        self.public_input_plonk_public_input(&fp_public_input, &state.fp_public_input)?;
        self.public_input_plonk_proof(fq_proof, state.fq_proof)?;
        self.public_input_plonk_public_input(&fq_public_input, &state.fq_public_input)?;

        Ok(())
    }
}
fn state_transition_function<P: PastaConfig>(
    signature: WireSchnorrSignature<P>,
    public_key_prev: WireAffine<P>,
    public_key_next: WireAffine<P>,
) -> WireBool<P::OtherCurve> {
    signature.verify(public_key_prev, &[public_key_next.x, public_key_next.y])
}

fn ivc_circuit(
    circuit_fp: WirePlonkCircuit<PallasConfig>,
    circuit_fq: WirePlonkCircuit<VestaConfig>,
    prev_pi_fp: WirePlonkProof<PallasConfig>,
    prev_pi_fq: WirePlonkProof<VestaConfig>,
    prev_x_fp: WirePlonkPublicInputs<PallasConfig>,
    prev_x_fq: WirePlonkPublicInputs<VestaConfig>,
    prev_i: WireScalar<PallasConfig>,
    signature: WireSchnorrSignature<PallasConfig>,
    pk_prev: WirePublicKey<PallasConfig>,
    pk_next: WirePublicKey<PallasConfig>,
) -> WireBool<PallasConfig> {
    let c1_fp = prev_pi_fp.verify_succinct(circuit_fp, prev_x_fp);
    let c1_fq = prev_pi_fq
        .verify_succinct(circuit_fq, prev_x_fq)
        .message_pass();
    let c1 = c1_fp & c1_fq;
    let c2 = prev_i.equals(WireScalar::zero());
    let c3 = state_transition_function(signature, pk_prev, pk_next).message_pass();

    (c1 | c2) & c3
}

#[cfg(test)]
mod tests {
    use crate::{
        frontend::{
            Call,
            ivc::{CallIVCState, IVC_FP_CIRCUIT, IVC_FQ_CIRCUIT, IVCState, WireIVCState},
            plonk::{CallPlonk, WirePlonkCircuit, WirePlonkProof, WirePlonkPublicInputs},
            primitives::WireAffine,
        },
        plonk::PlonkProof,
    };
    use anyhow::Result;
    use halo_group::{Affine, PallasConfig, ark_ec::AffineRepr, ark_std::rand::thread_rng};

    // #[test]
    // fn sanity_check() -> Result<()> {
    //     let rng = &mut thread_rng();
    //     let (fp_0, fq_0) = IVCState::print_ivc_circuit()?;

    //     let (fp_0_circuit, fp_0_x, fp_0_w) = fp_0.consume();
    //     let (fq_0_circuit, fq_0_x, fq_0_w) = fq_0.consume();

    //     assert_eq!(fp_0_circuit, IVC_FP_CIRCUIT);
    //     assert_eq!(fq_0_circuit, IVC_FQ_CIRCUIT);

    //     let ivc_state = IVCState::init();

    //     let fp_0_pi = PlonkProof::naive_prover(rng, fp_0_circuit, fp_0_x.clone(), fp_0_w);
    //     let fq_0_pi = PlonkProof::naive_prover(rng, fq_0_circuit, fq_0_x.clone(), fq_0_w);

    //     let wire_fp_circuit = WirePlonkCircuit::constant(&fp_0_circuit);
    //     let wire_fq_circuit = WirePlonkCircuit::constant(&fq_0_circuit);
    //     let wire_fp_x = WirePlonkPublicInputs::witness(IVC_ROW_COUNT, IVC_FP_PUBLIC_INPUT_COUNT);
    //     let wire_fq_x = WirePlonkPublicInputs::witness(IVC_ROW_COUNT, IVC_FQ_PUBLIC_INPUT_COUNT);
    //     let wire_fp_pi = WirePlonkProof::witness(IVC_ROW_COUNT);
    //     let wire_fq_pi = WirePlonkProof::witness(IVC_ROW_COUNT);
    //     let wire_pk_next = WireAffine::witness();
    //     let wire_ivc_state = WireIVCState::witness();
    //     wire_ivc_state.ivc_circuit(wire_fp_circuit, wire_fq_circuit, wire_pk_next);

    //     let mut call = Call::new();
    //     call.witness_ivc_state(&wire_ivc_state, &ivc_state)?;
    //     call.witness_affine(wire_pk_next, Affine::<PallasConfig>::generator())?;
    //     call.witness_plonk_public_input(&wire_fp_x, &fp_0_x)?;
    //     call.witness_plonk_public_input(&wire_fq_x, &fq_0_x)?;
    //     call.witness_plonk_proof(&wire_fp_pi, &fp_0_pi)?;
    //     call.witness_plonk_proof(&wire_fq_pi, &fq_0_pi)?;

    //     let (fp_trace, _) = call.trace(None)?;
    //     let (fp_1_circuit, _, _) = fp_trace.consume();

    //     assert_eq!(fp_0_circuit, fp_1_circuit);

    //     Ok(())
    // }
}
